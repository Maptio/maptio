$stroke-width-selected-not-hovered: 0.25rem;
$stroke-width-selected: 0.375rem;

$opacity-default: 1;
$opacity-filtered-out: 0.15;
$opacity-not-hovered: 0.65;

$shadow-filter-blur: 0.75rem;
$shadow-opacity-default: 0;
$shadow-opacity-selected-not-hovered: 0.75;
$shadow-opacity-selected: 1;

$shadow-scale-default: 1;
$shadow-scale-selected-not-hovered: 1;
$shadow-scale-selected: 1.004;

.circle {
  cursor: pointer;
  transition: all 0.2s ease-in;
}

.circle__info {
  transform: scale(1);
  transition: all 0.2s ease-in;
}

.circle__circle {
  stroke: white;
  stroke-width: 0;
  transition: all 0.2s ease-in;
}

.circle__shadow {
  display: none;
  opacity: $shadow-opacity-default;
  transform: scale($shadow-scale-default);
  filter: drop-shadow(0 0 $shadow-filter-blur gray);
  transition: opacity 0.2s ease-in;
  transition: transform 0.2s ease-in;
}

.circle--state-selected:not(.circle--state-filtered-out) {
  fill-opacity: $opacity-default;
  pointer-events: auto;

  > .circle__circle {
    stroke: white;
    stroke-width: $stroke-width-selected-not-hovered;
  }

  > .circle__shadow {
    display: inline;
    opacity: $shadow-opacity-selected-not-hovered;
    transform: scale($shadow-scale-selected-not-hovered);
  }

  > .circle__info {
    opacity: $opacity-default;
    pointer-events: auto;
  }
}

.circle:has(.circle:hover) {
  .circle__circle {
    fill-opacity: $opacity-not-hovered;
  }

  .circle__info {
    opacity: $opacity-not-hovered;
  }
}

// For hover effects isolated to a single circle, with the current nested SVG
// structure, we need to check that only circles without children that are also
// being hovered over, i.e. that we're selecting only the topmost hovered
// circle
.circle:not(:has(.circle:hover)):hover {
  opacity: $opacity-default;

  > .circle__circle {
    stroke-width: $stroke-width-selected;
    fill-opacity: $opacity-default;
  }

  > .circle__shadow {
    display: inline;
    opacity: $shadow-opacity-selected;
    transform: scale($shadow-scale-selected);
  }

  > .circle__info {
    opacity: $opacity-default;
  }
}

.circle--state-filtered-out {
  > .circle__circle {
    fill-opacity: $opacity-filtered-out !important;
    pointer-events: none;
  }

  > .circle__info {
    opacity: $opacity-filtered-out !important;
    pointer-events: none;
  }
}

.circle__popover {
  // Styles copied from .mat-tooltip @ 11.2.8
  $horizontal-padding: 8px;
  $max-width: 250px;
  $margin: 14px;

  $handset-horizontal-padding: 16px;
  $handset-margin: 24px;

  border-radius: 4px;
  margin: $margin;
  max-width: $max-width;
  padding-left: $horizontal-padding;
  padding-right: $horizontal-padding;
  text-overflow: ellipsis;

  // Our overrides
  padding: 0.5rem;
  color: black;
  background-color: white;
  font-size: 1rem;
}

.circle__popover--hidden {
  display: none;
}

.circle__popover-name {
  font-weight: 600;
}
