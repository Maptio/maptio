{"version":3,"file":"view_compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/view_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,UAAU,EAAC,MAAM,eAAe;OAIjC,EAAC,cAAc,EAAC,MAAM,WAAW;OAIjC,EAAC,cAAc,EAAC,MAAM,mBAAmB;OACzC,EAAC,WAAW,EAAC,MAAM,gBAAgB;OAEnC,EAAC,QAAQ,EAAC,MAAM,eAAe;OAC/B,EAAC,SAAS,EAAE,UAAU,EAAC,MAAM,gBAAgB;AAEpD,SAAQ,0BAA0B,EAAE,0BAA0B,EAAE,qBAAqB,QAAO,QAAQ,CAAC;AAErG;IACE,2BACW,UAAyB,EAAS,cAAsB,EACxD,YAC+E;QAF/E,eAAU,GAAV,UAAU,CAAe;QAAS,mBAAc,GAAd,cAAc,CAAQ;QACxD,iBAAY,GAAZ,YAAY,CACmE;IAAG,CAAC;IAChG,wBAAC;AAAD,CAAC,AALD,IAKC;AAGD;IACE,sBAAoB,UAA0B;QAA1B,eAAU,GAAV,UAAU,CAAgB;IAAG,CAAC;IAElD,uCAAgB,GAAhB,UACI,SAAmC,EAAE,QAAuB,EAAE,MAAoB,EAClF,KAA4B,EAC5B,kBAAiD;QACnD,IAAM,YAAY,GACuE,EAAE,CAAC;QAC5F,IAAM,IAAI,GAAG,IAAI,WAAW,CACxB,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC,EAChE,cAAc,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;QAErC,IAAM,UAAU,GAAkB,EAAE,CAAC;QACrC,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QACxC,gEAAgE;QAChE,iDAAiD;QACjD,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACzB,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAE7B,MAAM,CAAC,IAAI,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAChF,CAAC;IACI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,cAAc,GAAG;KACvB,CAAC;IACF,mBAAC;AAAD,CAAC,AA7BD,IA6BC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AnimationEntryCompileResult} from '../animation/animation_compiler';\nimport {CompileDirectiveMetadata, CompilePipeMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport * as o from '../output/output_ast';\nimport {TemplateAst} from '../template_parser/template_ast';\n\nimport {CompileElement} from './compile_element';\nimport {CompileView} from './compile_view';\nimport {ComponentFactoryDependency, DirectiveWrapperDependency, ViewFactoryDependency} from './deps';\nimport {bindView} from './view_binder';\nimport {buildView, finishView} from './view_builder';\n\nexport {ComponentFactoryDependency, DirectiveWrapperDependency, ViewFactoryDependency} from './deps';\n\nexport class ViewCompileResult {\n  constructor(\n      public statements: o.Statement[], public viewFactoryVar: string,\n      public dependencies:\n          Array<ViewFactoryDependency|ComponentFactoryDependency|DirectiveWrapperDependency>) {}\n}\n\n\nexport class ViewCompiler {\n  constructor(private _genConfig: CompilerConfig) {}\n\n  compileComponent(\n      component: CompileDirectiveMetadata, template: TemplateAst[], styles: o.Expression,\n      pipes: CompilePipeMetadata[],\n      compiledAnimations: AnimationEntryCompileResult[]): ViewCompileResult {\n    const dependencies:\n        Array<ViewFactoryDependency|ComponentFactoryDependency|DirectiveWrapperDependency> = [];\n    const view = new CompileView(\n        component, this._genConfig, pipes, styles, compiledAnimations, 0,\n        CompileElement.createNull(), []);\n\n    const statements: o.Statement[] = [];\n    buildView(view, template, dependencies);\n    // Need to separate binding from creation to be able to refer to\n    // variables that have been declared after usage.\n    bindView(view, template);\n    finishView(view, statements);\n\n    return new ViewCompileResult(statements, view.viewFactory.name, dependencies);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: CompilerConfig, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}